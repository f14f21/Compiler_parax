//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Asp.net\Compiler_parax\Faz-2\Faz_2_ANTLR_v2\MyProject\c.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MyProject {

	using System;
	using System.Collections;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class cParser : Parser {
	public const int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, ID=8, INT=9, NEWLINE=10, 
		WS=11;
	public static readonly string[] tokenNames = {
		"<INVALID>", "')'", "'+'", "'-'", "'*'", "'('", "'/'", "'='", "ID", "INT", 
		"NEWLINE", "WS"
	};
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_expr = 2, RULE_texpr = 3, RULE_atom = 4;
	public static readonly string[] ruleNames = {
		"prog", "stat", "expr", "texpr", "atom"
	};

	public override string GrammarFileName { get { return "c.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		Hashtable symbolTable=new Hashtable();
		Hashtable symbolTable2=new Hashtable();

	public cParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IReadOnlyList<StatContext> stat() {
			return GetRuleContexts<StatContext>();
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcVisitor<TResult> typedVisitor = visitor as IcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 10; stat();
				}
				}
				State = 13;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << ID) | (1L << INT) | (1L << NEWLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public ExprContext _expr;
		public ITerminalNode NEWLINE() { return GetToken(cParser.NEWLINE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(cParser.ID, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcVisitor<TResult> typedVisitor = visitor as IcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 25;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 15; _localctx._expr = expr();
				State = 16; Match(NEWLINE);
				System.Console.WriteLine((_localctx._expr!=null?_input.GetText(_localctx._expr.start,_localctx._expr.stop):null) + " = " +  _localctx._expr.v);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; Match(ID);
				State = 20; Match(T__0);
				State = 21; expr();
				State = 22; Match(NEWLINE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 24; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public int v;
		public TexprContext _texpr;
		public ExprContext b1;
		public ExprContext b2;
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TexprContext texpr() {
			return GetRuleContext<TexprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcVisitor<TResult> typedVisitor = visitor as IcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; _localctx._texpr = texpr();
			_localctx.v = _localctx._texpr.value;
			State = 41;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 37;
					switch (_input.La(1)) {
					case T__5:
						{
						State = 29; Match(T__5);
						State = 30; _localctx.b1 = expr();
						_localctx.v+=_localctx.b1.v;
						}
						break;
					case T__4:
						{
						State = 33; Match(T__4);
						State = 34; _localctx.b2 = expr();
						_localctx.v-=_localctx.b2.v;
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 43;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TexprContext : ParserRuleContext {
		public int value;
		public AtomContext a;
		public TexprContext b;
		public TexprContext c;
		public TexprContext texpr(int i) {
			return GetRuleContext<TexprContext>(i);
		}
		public IReadOnlyList<TexprContext> texpr() {
			return GetRuleContexts<TexprContext>();
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public TexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_texpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.EnterTexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.ExitTexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcVisitor<TResult> typedVisitor = visitor as IcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TexprContext texpr() {
		TexprContext _localctx = new TexprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_texpr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; _localctx.a = atom();
			_localctx.value = Int32.Parse((_localctx.a!=null?_input.GetText(_localctx.a.start,_localctx.a.stop):null));
			State = 58;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 54;
					switch (_input.La(1)) {
					case T__3:
						{
						State = 46; Match(T__3);
						State = 47; _localctx.b = texpr();
						_localctx.value*=Int32.Parse((_localctx.b!=null?_input.GetText(_localctx.b.start,_localctx.b.stop):null));
						}
						break;
					case T__1:
						{
						State = 50; Match(T__1);
						State = 51; _localctx.c = texpr();
						_localctx.value/=Int32.Parse((_localctx.c!=null?_input.GetText(_localctx.c.start,_localctx.c.stop):null));
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 60;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(cParser.INT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(cParser.ID, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcListener typedListener = listener as IcListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcVisitor<TResult> typedVisitor = visitor as IcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_atom);
		try {
			State = 67;
			switch (_input.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(INT);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(ID);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; Match(T__2);
				State = 64; expr();
				State = 65; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\rH\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x6\x2\xE\n\x2\r\x2\xE"+
		"\x2\xF\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5"+
		"\x3\x1C\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4(\n\x4\a\x4*\n\x4\f\x4\xE\x4-\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x39\n\x5\a\x5;\n\x5\f\x5\xE\x5"+
		">\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x46\n\x6\x3\x6\x2\x2"+
		"\x2\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x2K\x2\r\x3\x2\x2\x2\x4\x1B\x3\x2"+
		"\x2\x2\x6\x1D\x3\x2\x2\x2\b.\x3\x2\x2\x2\n\x45\x3\x2\x2\x2\f\xE\x5\x4"+
		"\x3\x2\r\f\x3\x2\x2\x2\xE\xF\x3\x2\x2\x2\xF\r\x3\x2\x2\x2\xF\x10\x3\x2"+
		"\x2\x2\x10\x3\x3\x2\x2\x2\x11\x12\x5\x6\x4\x2\x12\x13\a\f\x2\x2\x13\x14"+
		"\b\x3\x1\x2\x14\x1C\x3\x2\x2\x2\x15\x16\a\n\x2\x2\x16\x17\a\t\x2\x2\x17"+
		"\x18\x5\x6\x4\x2\x18\x19\a\f\x2\x2\x19\x1C\x3\x2\x2\x2\x1A\x1C\a\f\x2"+
		"\x2\x1B\x11\x3\x2\x2\x2\x1B\x15\x3\x2\x2\x2\x1B\x1A\x3\x2\x2\x2\x1C\x5"+
		"\x3\x2\x2\x2\x1D\x1E\x5\b\x5\x2\x1E+\b\x4\x1\x2\x1F \a\x4\x2\x2 !\x5\x6"+
		"\x4\x2!\"\b\x4\x1\x2\"(\x3\x2\x2\x2#$\a\x5\x2\x2$%\x5\x6\x4\x2%&\b\x4"+
		"\x1\x2&(\x3\x2\x2\x2\'\x1F\x3\x2\x2\x2\'#\x3\x2\x2\x2(*\x3\x2\x2\x2)\'"+
		"\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,\a\x3\x2\x2\x2"+
		"-+\x3\x2\x2\x2./\x5\n\x6\x2/<\b\x5\x1\x2\x30\x31\a\x6\x2\x2\x31\x32\x5"+
		"\b\x5\x2\x32\x33\b\x5\x1\x2\x33\x39\x3\x2\x2\x2\x34\x35\a\b\x2\x2\x35"+
		"\x36\x5\b\x5\x2\x36\x37\b\x5\x1\x2\x37\x39\x3\x2\x2\x2\x38\x30\x3\x2\x2"+
		"\x2\x38\x34\x3\x2\x2\x2\x39;\x3\x2\x2\x2:\x38\x3\x2\x2\x2;>\x3\x2\x2\x2"+
		"<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\t\x3\x2\x2\x2><\x3\x2\x2\x2?\x46\a\v\x2"+
		"\x2@\x46\a\n\x2\x2\x41\x42\a\a\x2\x2\x42\x43\x5\x6\x4\x2\x43\x44\a\x3"+
		"\x2\x2\x44\x46\x3\x2\x2\x2\x45?\x3\x2\x2\x2\x45@\x3\x2\x2\x2\x45\x41\x3"+
		"\x2\x2\x2\x46\v\x3\x2\x2\x2\t\xF\x1B\'+\x38<\x45";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MyProject
