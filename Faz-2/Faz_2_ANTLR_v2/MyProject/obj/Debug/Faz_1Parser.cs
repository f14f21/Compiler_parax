//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Asp.net\Compiler_parax\Faz-2\Faz_2_ANTLR_v2\MyProject\Faz_1.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MyProject {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class Faz_1Parser : Parser {
	public const int
		T__17=1, T__16=2, T__15=3, T__14=4, T__13=5, T__12=6, T__11=7, T__10=8, 
		T__9=9, T__8=10, T__7=11, T__6=12, T__5=13, T__4=14, T__3=15, T__2=16, 
		T__1=17, T__0=18, Relation=19, OpRep=20, Relop=21, ID=22, Letter=23, Num=24, 
		Comment=25, WS=26;
	public static readonly string[] tokenNames = {
		"<INVALID>", "')'", "','", "'while'", "'('", "'for'", "'print'", "'if'", 
		"'='", "'main'", "'void '", "';'", "'printf'", "'''", "'{'", "'char '", 
		"'else'", "'int '", "'}'", "Relation", "OpRep", "Relop", "ID", "Letter", 
		"Num", "Comment", "WS"
	};
	public const int
		RULE_script = 0, RULE_stmt = 1, RULE_assignstat = 2, RULE_ifstat = 3, 
		RULE_elsepart = 4, RULE_cond = 5, RULE_expr = 6, RULE_term = 7, RULE_restexpr = 8, 
		RULE_whilestat = 9, RULE_define = 10, RULE_forstat = 11, RULE_print = 12;
	public static readonly string[] ruleNames = {
		"script", "stmt", "assignstat", "ifstat", "elsepart", "cond", "expr", 
		"term", "restexpr", "whilestat", "define", "forstat", "print"
	};

	public override string GrammarFileName { get { return "Faz_1.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Faz_1Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : ParserRuleContext {
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IReadOnlyList<StmtContext> stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(T__8);
			State = 27; Match(T__9);
			State = 28; Match(T__14);
			State = 29; Match(T__17);
			State = 30; Match(T__4);
			State = 34;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__14) | (1L << T__13) | (1L << T__12) | (1L << T__11) | (1L << T__6) | (1L << T__5) | (1L << T__3) | (1L << T__1) | (1L << Relation) | (1L << Relop) | (1L << ID) | (1L << Num) | (1L << Comment))) != 0)) {
				{
				{
				State = 31; stmt();
				}
				}
				State = 36;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 37; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public ForstatContext forstat() {
			return GetRuleContext<ForstatContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignstatContext assignstat() {
			return GetRuleContext<AssignstatContext>(0);
		}
		public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		public ITerminalNode Comment() { return GetToken(Faz_1Parser.Comment, 0); }
		public IfstatContext ifstat() {
			return GetRuleContext<IfstatContext>(0);
		}
		public WhilestatContext whilestat() {
			return GetRuleContext<WhilestatContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_stmt);
		try {
			State = 51;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; ifstat();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; forstat();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 41; whilestat();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 42; assignstat();
				State = 43; Match(T__7);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 45; expr();
				State = 46; Match(T__7);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 48; define();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 49; print();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 50; Match(Comment);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignstatContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(Faz_1Parser.ID, 0); }
		public AssignstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterAssignstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitAssignstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignstatContext assignstat() {
		AssignstatContext _localctx = new AssignstatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_assignstat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(ID);
			State = 54; Match(T__10);
			State = 55; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstatContext : ParserRuleContext {
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ElsepartContext elsepart() {
			return GetRuleContext<ElsepartContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public IfstatContext ifstat() {
			return GetRuleContext<IfstatContext>(0);
		}
		public IReadOnlyList<StmtContext> stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public IfstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterIfstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitIfstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstatContext ifstat() {
		IfstatContext _localctx = new IfstatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(T__11);
			State = 58; Match(T__14);
			State = 59; cond();
			State = 60; Match(T__17);
			State = 75;
			switch (_input.La(1)) {
			case T__11:
				{
				State = 61; ifstat();
				}
				break;
			case T__4:
				{
				State = 62; Match(T__4);
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__14) | (1L << T__13) | (1L << T__12) | (1L << T__11) | (1L << T__6) | (1L << T__5) | (1L << T__3) | (1L << T__1) | (1L << Relation) | (1L << Relop) | (1L << ID) | (1L << Num) | (1L << Comment))) != 0)) {
					{
					{
					State = 63; stmt();
					}
					}
					State = 68;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 69; Match(T__0);
				State = 72;
				switch (_input.La(1)) {
				case T__2:
					{
					State = 70; elsepart();
					}
					break;
				case T__14:
				case T__5:
				case Relation:
				case Relop:
				case ID:
				case Num:
					{
					State = 71; expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__2:
				{
				State = 74; elsepart();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsepartContext : ParserRuleContext {
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfstatContext ifstat() {
			return GetRuleContext<IfstatContext>(0);
		}
		public IReadOnlyList<StmtContext> stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public ElsepartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsepart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterElsepart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitElsepart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsepart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsepartContext elsepart() {
		ElsepartContext _localctx = new ElsepartContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elsepart);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(T__2);
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 78; ifstat();
				}
				break;

			case 2:
				{
				State = 79; Match(T__4);
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__14) | (1L << T__13) | (1L << T__12) | (1L << T__11) | (1L << T__6) | (1L << T__5) | (1L << T__3) | (1L << T__1) | (1L << Relation) | (1L << Relop) | (1L << ID) | (1L << Num) | (1L << Comment))) != 0)) {
					{
					{
					State = 80; stmt();
					}
					}
					State = 85;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 86; Match(T__0);
				}
				break;

			case 3:
				{
				State = 90;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 87; expr();
						}
						} 
					}
					State = 92;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode Relation() { return GetToken(Faz_1Parser.Relation, 0); }
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_cond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; expr();
			State = 96; Match(Relation);
			State = 97; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode OpRep() { return GetToken(Faz_1Parser.OpRep, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RestexprContext restexpr() {
			return GetRuleContext<RestexprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_expr);
		try {
			State = 115;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; term();
				State = 100; restexpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; term();
				State = 103; Match(OpRep);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105; term();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106; restexpr();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 107; Match(T__14);
				State = 108; expr();
				State = 109; Match(T__17);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 111; Match(T__5);
				State = 112; expr();
				State = 113; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode Num() { return GetToken(Faz_1Parser.Num, 0); }
		public ITerminalNode ID() { return GetToken(Faz_1Parser.ID, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = _input.La(1);
			if ( !(_la==ID || _la==Num) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestexprContext : ParserRuleContext {
		public ITerminalNode Relop() { return GetToken(Faz_1Parser.Relop, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Relation() { return GetToken(Faz_1Parser.Relation, 0); }
		public RestexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterRestexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitRestexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestexprContext restexpr() {
		RestexprContext _localctx = new RestexprContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_restexpr);
		try {
			State = 124;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; Match(Relop);
				State = 120; expr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; Match(Relation);
				State = 122; expr();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; Match(Relop);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestatContext : ParserRuleContext {
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public IReadOnlyList<StmtContext> stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public WhilestatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterWhilestat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitWhilestat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestatContext whilestat() {
		WhilestatContext _localctx = new WhilestatContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_whilestat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(T__15);
			State = 127; Match(T__14);
			State = 128; cond();
			State = 129; Match(T__17);
			State = 130; Match(T__4);
			State = 134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__14) | (1L << T__13) | (1L << T__12) | (1L << T__11) | (1L << T__6) | (1L << T__5) | (1L << T__3) | (1L << T__1) | (1L << Relation) | (1L << Relop) | (1L << ID) | (1L << Num) | (1L << Comment))) != 0)) {
				{
				{
				State = 131; stmt();
				}
				}
				State = 136;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 137; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(Faz_1Parser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(Faz_1Parser.ID, i);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_define);
		try {
			int _alt;
			State = 159;
			switch (_input.La(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; Match(T__1);
				State = 140; Match(ID);
				State = 145;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 141; Match(T__16);
						State = 142; Match(ID);
						}
						} 
					}
					State = 147;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				State = 148; Match(T__7);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(T__3);
				State = 150; Match(ID);
				State = 155;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 151; Match(T__16);
						State = 152; Match(ID);
						}
						} 
					}
					State = 157;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				}
				State = 158; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstatContext : ParserRuleContext {
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public AssignstatContext assignstat(int i) {
			return GetRuleContext<AssignstatContext>(i);
		}
		public ITerminalNode OpRep() { return GetToken(Faz_1Parser.OpRep, 0); }
		public IReadOnlyList<AssignstatContext> assignstat() {
			return GetRuleContexts<AssignstatContext>();
		}
		public ITerminalNode ID() { return GetToken(Faz_1Parser.ID, 0); }
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public IReadOnlyList<StmtContext> stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public ForstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterForstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitForstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstatContext forstat() {
		ForstatContext _localctx = new ForstatContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_forstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(T__13);
			State = 162; Match(T__14);
			State = 163; assignstat();
			State = 164; Match(T__7);
			State = 165; cond();
			State = 166; Match(T__7);
			State = 172;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 167; Match(ID);
				State = 168; Match(OpRep);
				}
				break;

			case 2:
				{
				State = 169; Match(OpRep);
				State = 170; Match(ID);
				}
				break;

			case 3:
				{
				State = 171; assignstat();
				}
				break;
			}
			State = 174; Match(T__17);
			State = 184;
			switch (_input.La(1)) {
			case T__4:
				{
				State = 175; Match(T__4);
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__14) | (1L << T__13) | (1L << T__12) | (1L << T__11) | (1L << T__6) | (1L << T__5) | (1L << T__3) | (1L << T__1) | (1L << Relation) | (1L << Relop) | (1L << ID) | (1L << Num) | (1L << Comment))) != 0)) {
					{
					{
					State = 176; stmt();
					}
					}
					State = 181;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 182; Match(T__0);
				}
				break;
			case T__15:
			case T__14:
			case T__13:
			case T__12:
			case T__11:
			case T__6:
			case T__5:
			case T__3:
			case T__1:
			case Relation:
			case Relop:
			case ID:
			case Num:
			case Comment:
				{
				State = 183; stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(Faz_1Parser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(Faz_1Parser.ID, i);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFaz_1Listener typedListener = listener as IFaz_1Listener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFaz_1Visitor<TResult> typedVisitor = visitor as IFaz_1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = _input.La(1);
			if ( !(_la==T__12 || _la==T__6) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 187; Match(T__14);
			State = 194;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				State = 189;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 188; Match(ID);
					}
					}
					State = 191;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==ID );
				}
				break;

			case 2:
				{
				State = 193; expr();
				}
				break;
			}
			State = 196; Match(T__17);
			State = 197; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1C\xCA\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\a\x2#\n\x2\f\x2\xE\x2&\v\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x36"+
		"\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\a\x5\x43\n\x5\f\x5\xE\x5\x46\v\x5\x3\x5\x3\x5\x3\x5\x5\x5K\n\x5\x3\x5"+
		"\x5\x5N\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6T\n\x6\f\x6\xE\x6W\v\x6\x3\x6"+
		"\x3\x6\a\x6[\n\x6\f\x6\xE\x6^\v\x6\x5\x6`\n\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x5\bv\n\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x7F\n\n\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x87\n\v\f\v\xE\v\x8A\v\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\f\a\f\x92\n\f\f\f\xE\f\x95\v\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\a\f\x9C\n\f\f\f\xE\f\x9F\v\f\x3\f\x5\f\xA2\n\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xAF\n\r\x3\r\x3\r\x3\r\a\r\xB4\n"+
		"\r\f\r\xE\r\xB7\v\r\x3\r\x3\r\x5\r\xBB\n\r\x3\xE\x3\xE\x3\xE\x6\xE\xC0"+
		"\n\xE\r\xE\xE\xE\xC1\x3\xE\x5\xE\xC5\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x4\x93"+
		"\x9D\x2\x2\xF\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x2\x4\x4\x2\x18\x18\x1A\x1A\x4\x2\b\b\xE\xE\xDD"+
		"\x2\x1C\x3\x2\x2\x2\x4\x35\x3\x2\x2\x2\x6\x37\x3\x2\x2\x2\b;\x3\x2\x2"+
		"\x2\nO\x3\x2\x2\x2\f\x61\x3\x2\x2\x2\xEu\x3\x2\x2\x2\x10w\x3\x2\x2\x2"+
		"\x12~\x3\x2\x2\x2\x14\x80\x3\x2\x2\x2\x16\xA1\x3\x2\x2\x2\x18\xA3\x3\x2"+
		"\x2\x2\x1A\xBC\x3\x2\x2\x2\x1C\x1D\a\f\x2\x2\x1D\x1E\a\v\x2\x2\x1E\x1F"+
		"\a\x6\x2\x2\x1F \a\x3\x2\x2 $\a\x10\x2\x2!#\x5\x4\x3\x2\"!\x3\x2\x2\x2"+
		"#&\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\'\x3\x2\x2\x2&$\x3\x2\x2"+
		"\x2\'(\a\x14\x2\x2(\x3\x3\x2\x2\x2)\x36\x5\b\x5\x2*\x36\x5\x18\r\x2+\x36"+
		"\x5\x14\v\x2,-\x5\x6\x4\x2-.\a\r\x2\x2.\x36\x3\x2\x2\x2/\x30\x5\xE\b\x2"+
		"\x30\x31\a\r\x2\x2\x31\x36\x3\x2\x2\x2\x32\x36\x5\x16\f\x2\x33\x36\x5"+
		"\x1A\xE\x2\x34\x36\a\x1B\x2\x2\x35)\x3\x2\x2\x2\x35*\x3\x2\x2\x2\x35+"+
		"\x3\x2\x2\x2\x35,\x3\x2\x2\x2\x35/\x3\x2\x2\x2\x35\x32\x3\x2\x2\x2\x35"+
		"\x33\x3\x2\x2\x2\x35\x34\x3\x2\x2\x2\x36\x5\x3\x2\x2\x2\x37\x38\a\x18"+
		"\x2\x2\x38\x39\a\n\x2\x2\x39:\x5\xE\b\x2:\a\x3\x2\x2\x2;<\a\t\x2\x2<="+
		"\a\x6\x2\x2=>\x5\f\a\x2>M\a\x3\x2\x2?N\x5\b\x5\x2@\x44\a\x10\x2\x2\x41"+
		"\x43\x5\x4\x3\x2\x42\x41\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2"+
		"\x2\x2\x44\x45\x3\x2\x2\x2\x45G\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2GJ\a\x14"+
		"\x2\x2HK\x5\n\x6\x2IK\x5\xE\b\x2JH\x3\x2\x2\x2JI\x3\x2\x2\x2KN\x3\x2\x2"+
		"\x2LN\x5\n\x6\x2M?\x3\x2\x2\x2M@\x3\x2\x2\x2ML\x3\x2\x2\x2N\t\x3\x2\x2"+
		"\x2O_\a\x12\x2\x2P`\x5\b\x5\x2QU\a\x10\x2\x2RT\x5\x4\x3\x2SR\x3\x2\x2"+
		"\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3\x2\x2\x2WU\x3\x2\x2"+
		"\x2X`\a\x14\x2\x2Y[\x5\xE\b\x2ZY\x3\x2\x2\x2[^\x3\x2\x2\x2\\Z\x3\x2\x2"+
		"\x2\\]\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2\x2_P\x3\x2\x2\x2_Q\x3\x2"+
		"\x2\x2_\\\x3\x2\x2\x2`\v\x3\x2\x2\x2\x61\x62\x5\xE\b\x2\x62\x63\a\x15"+
		"\x2\x2\x63\x64\x5\xE\b\x2\x64\r\x3\x2\x2\x2\x65\x66\x5\x10\t\x2\x66g\x5"+
		"\x12\n\x2gv\x3\x2\x2\x2hi\x5\x10\t\x2ij\a\x16\x2\x2jv\x3\x2\x2\x2kv\x5"+
		"\x10\t\x2lv\x5\x12\n\x2mn\a\x6\x2\x2no\x5\xE\b\x2op\a\x3\x2\x2pv\x3\x2"+
		"\x2\x2qr\a\xF\x2\x2rs\x5\xE\b\x2st\a\xF\x2\x2tv\x3\x2\x2\x2u\x65\x3\x2"+
		"\x2\x2uh\x3\x2\x2\x2uk\x3\x2\x2\x2ul\x3\x2\x2\x2um\x3\x2\x2\x2uq\x3\x2"+
		"\x2\x2v\xF\x3\x2\x2\x2wx\t\x2\x2\x2x\x11\x3\x2\x2\x2yz\a\x17\x2\x2z\x7F"+
		"\x5\xE\b\x2{|\a\x15\x2\x2|\x7F\x5\xE\b\x2}\x7F\a\x17\x2\x2~y\x3\x2\x2"+
		"\x2~{\x3\x2\x2\x2~}\x3\x2\x2\x2\x7F\x13\x3\x2\x2\x2\x80\x81\a\x5\x2\x2"+
		"\x81\x82\a\x6\x2\x2\x82\x83\x5\f\a\x2\x83\x84\a\x3\x2\x2\x84\x88\a\x10"+
		"\x2\x2\x85\x87\x5\x4\x3\x2\x86\x85\x3\x2\x2\x2\x87\x8A\x3\x2\x2\x2\x88"+
		"\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2\x2\x8A\x88\x3\x2"+
		"\x2\x2\x8B\x8C\a\x14\x2\x2\x8C\x15\x3\x2\x2\x2\x8D\x8E\a\x13\x2\x2\x8E"+
		"\x93\a\x18\x2\x2\x8F\x90\a\x4\x2\x2\x90\x92\a\x18\x2\x2\x91\x8F\x3\x2"+
		"\x2\x2\x92\x95\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94"+
		"\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\xA2\a\r\x2\x2\x97\x98\a\x11\x2"+
		"\x2\x98\x9D\a\x18\x2\x2\x99\x9A\a\x4\x2\x2\x9A\x9C\a\x18\x2\x2\x9B\x99"+
		"\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2\x2"+
		"\x2\x9E\xA0\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA2\a\r\x2\x2\xA1\x8D"+
		"\x3\x2\x2\x2\xA1\x97\x3\x2\x2\x2\xA2\x17\x3\x2\x2\x2\xA3\xA4\a\a\x2\x2"+
		"\xA4\xA5\a\x6\x2\x2\xA5\xA6\x5\x6\x4\x2\xA6\xA7\a\r\x2\x2\xA7\xA8\x5\f"+
		"\a\x2\xA8\xAE\a\r\x2\x2\xA9\xAA\a\x18\x2\x2\xAA\xAF\a\x16\x2\x2\xAB\xAC"+
		"\a\x16\x2\x2\xAC\xAF\a\x18\x2\x2\xAD\xAF\x5\x6\x4\x2\xAE\xA9\x3\x2\x2"+
		"\x2\xAE\xAB\x3\x2\x2\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xBA"+
		"\a\x3\x2\x2\xB1\xB5\a\x10\x2\x2\xB2\xB4\x5\x4\x3\x2\xB3\xB2\x3\x2\x2\x2"+
		"\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3"+
		"\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBB\a\x14\x2\x2\xB9\xBB\x5\x4\x3\x2"+
		"\xBA\xB1\x3\x2\x2\x2\xBA\xB9\x3\x2\x2\x2\xBB\x19\x3\x2\x2\x2\xBC\xBD\t"+
		"\x3\x2\x2\xBD\xC4\a\x6\x2\x2\xBE\xC0\a\x18\x2\x2\xBF\xBE\x3\x2\x2\x2\xC0"+
		"\xC1\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC5\x3\x2"+
		"\x2\x2\xC3\xC5\x5\xE\b\x2\xC4\xBF\x3\x2\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5"+
		"\xC6\x3\x2\x2\x2\xC6\xC7\a\x3\x2\x2\xC7\xC8\a\r\x2\x2\xC8\x1B\x3\x2\x2"+
		"\x2\x15$\x35\x44JMU\\_u~\x88\x93\x9D\xA1\xAE\xB5\xBA\xC1\xC4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MyProject
